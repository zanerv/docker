---
version: '2'
volumes:
  nextcloud:
networks:
  proxy-tier:

services:

  firetv-server:
    image: marvambass/firetv-server
    container_name: firetv
    hostname: firetv
    restart: always
    depends_on:
      - hass
    environment:
      FIRETV: ${FIRETV}
    ports:
      - "5556:5556"
    volumes:
      - /root/.android:/root/.android:ro
    dns: ${DNS}

  tautulli:
    image: tautulli/tautulli
    container_name: tautulli
    hostname: tautulli
    ports:
     - 8181
    environment:
      - VIRTUAL_HOST=tautulli.${DOMAIN}
      - VIRTUAL_PORT=8181
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      - /opt/appdata/tautulli/logs:/logs
      - /opt/appdata/tautulli/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
    dns: ${DNS}
    networks:
      - proxy-tier
      - default

  smokeping:
    image: linuxserver/smokeping
    container_name: smokeping
    hostname: smokeping
    ports:
     - 80
    environment:
      - VIRTUAL_HOST=smokeping.${DOMAIN}
      - VIRTUAL_PORT=80
      - PUID=${PUID}
      - PGID=${PGID}
    volumes:
      # - /opt/appdata/smokeping/resolv.conf:/etc/resolv.conf:ro
      - /opt/appdata/smokeping/data:/data
      - /opt/appdata/smokeping/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
    dns: ${DNS}
    networks:
      - proxy-tier
      - default

  influxdb:
    image: influxdb
    container_name: influxdb
    hostname: influxdb
    restart: always
    ports:
      - "8086:8086"
      - "25826:25826/udp"
    volumes:
      - /opt/appdata/influxdb:/var/lib/influxdb
      - /opt/appdata/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf:ro
      - /opt/appdata/collectd/types.db:/usr/share/collectd/types.db:ro
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
    dns: ${DNS}
    networks:
      - default
      
  grafana:
    image: grafana/grafana
    container_name: grafana
    hostname: grafana
    user: "1001"
    restart: always
    depends_on:
      - influxdb
    ports:
      - 3000
    environment:
      - VIRTUAL_HOST=grafana.${DOMAIN}
      - VIRTUAL_PORT=3000
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${DOMAIN}:25
      - GF_SMTP_FROM_ADDRESS=${EMAIL}
      - GF_SMTP_USER=${EMAIL}
      - GF_SMTP_PASSWORD=${EMAIL_PASS}
      - GF_SMTP_SKIP_VERIFY=true
    volumes:
      - /opt/appdata/grafana/plugins:/var/lib/grafana/plugins
      - /opt/appdata/grafana:/var/lib/grafana
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
    dns: ${DNS}
    networks:
      - proxy-tier
      - default
  
  plex:
    image: plexinc/pms-docker
    container_name: plex
    hostname: plex
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
      - /opt/appdata/plex:/config
      - /media/Movies:/media/Movies
      - /media/Music:/media/Music
      - /media/TV:/media/TV
#    network_mode: host
    ports:
      - 32400:32400/tcp 
      - 33400:33400/tcp
#Plex Companion
      - 3005:3005/tcp
#roku
      - 8324:8324/tcp
#DLNA Server
      - 32469:32469/tcp
      - 1900:1900/udp
#GDM network discovery
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    restart: always
    environment:
      - VIRTUAL_HOST=plex.${DOMAIN}
      - VIRTUAL_PORT=32400
      - LETSENCRYPT_HOST=plex.${DOMAIN}
      - ADVERTISE_IP=https://plex.${DOMAIN}/
      - PLEX_CLAIM="nope"
      - PLEX_UID=${PUID}
      - PLEX_GID=${PGID}
    dns: ${DNS}
    networks:
      - proxy-tier
      - default

  transmission:
    image: linuxserver/transmission
    container_name: transmission
    hostname: transmission
    ports:
      - 9091:9091
      - 51413:51413
    restart: always
    volumes:
      - /opt/appdata/transmission:/config
      - /etc/localtime:/etc/localtime:ro
      - /media/tmp:/media/tmp
      - /media/Movies:/media/Movies
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VIRTUAL_HOST=transmission.${DOMAIN}
      - VIRTUAL_PORT=9091
    dns: ${DNS}
    networks:
      - proxy-tier
      - default

  couchpotato:
    image: linuxserver/couchpotato
    container_name: couchpotato
    hostname: couchpotato
    depends_on:
      - transmission
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
      - /opt/appdata/couchpotato:/config
      - /media/Movies:/media/Movies 
    ports:
      - 5050:5050
    links:
      - transmission:transmission
    restart: always
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VIRTUAL_HOST=couchpotato.${DOMAIN}
      - VIRTUAL_PORT=5050
    dns: ${DNS}
    networks:
      - proxy-tier
      - default

  sickrage:
    image: linuxserver/sickrage
    container_name: sickrage
    hostname: sickrage
    ports:
    - 8081:8081
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VIRTUAL_HOST=sickrage.${DOMAIN}
      - VIRTUAL_PORT=8081
    restart: always
    links:
      - transmission:transmission
    depends_on:
      - transmission
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /opt/appdata/sickrage:/config
      - /media/tmp:/media/tmp
      - /media/TV:/media/TV
    dns: ${DNS}
    networks:
      - proxy-tier
      - default

  portainer:
    image: portainer/portainer
    container_name: portainer
    hostname: portainer
    ports:
      - 9000
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - VIRTUAL_HOST=portainer.${DOMAIN}
      - VIRTUAL_PORT=9000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
      - /opt/appdata/portainer:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart:
      always
    dns: ${DNS}
    networks:
      - proxy-tier
      - default

  openvpn:
    cap_add:
     - NET_ADMIN
    image: kylemanna/openvpn
    container_name: openvpn
    hostname: openvpn
    ports:
     - "1194:1194/udp"
    restart: always
    volumes:
      - /opt/appdata/openvpn:/etc/openvpn
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
    dns: ${DNS}

  proxy:
    image: jwilder/nginx-proxy:alpine
    container_name: proxy
    hostname: proxy
    restart: always
    ports:
      - 80:80
      - 443:443
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    volumes:
      - /opt/appdata/hass/ssl:/ssl:ro
      - /opt/appdata/proxy/certs:/etc/nginx/certs:ro
      - /opt/appdata/proxy/conf.d:/etc/nginx/conf.d
      - /opt/appdata/proxy/vhost.d:/etc/nginx/vhost.d
      - /opt/appdata/proxy/html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    environment:
      - DEFAULT_HOST=pihole.${DOMAIN}
    dns: ${DNS}
    networks:
      proxy-tier:
        ipv4_address: 172.19.0.4

###Pi Hole###
  pihole:
    image: pihole/pihole
    container_name: pihole
    hostname: pihole
    ports:
      - ${IP}:53:53/tcp
      - ${IP}:53:53/udp
      - 8053:80/tcp
      - 44353:443/tcp
    cap_add:
      - NET_ADMIN
    environment:
      # enter your docker host IP here
      - ServerIP=${IP}
      # jwilder/proxy envs, see readme for more info
      - PROXY_LOCATION=pihole
      - VIRTUAL_HOST=pihole.${DOMAIN}
      - VIRTUAL_PORT=80
      - WEBPASSWORD=${WEBPASSWORD}
      - DNS1=1.1.1.1
    # Add your own custom hostnames you need for your domain
    extra_hosts:
    # Resolve to nothing domains (terminate connection)
      - 'nw2master.bioware.com nwn2.master.gamespy.com:0.0.0.0'
    # LAN hostnames for other docker containers using jwilder
      - 'sickrage sickrage.${DOMAIN}:${IP}'
      - 'couchpotato couchpotato.${DOMAIN}:${IP}'
      - 'transmission transmission.${DOMAIN}:${IP}'
      - 'plex plex.${DOMAIN}:${IP}'
      - 'grafana grafana.${DOMAIN}:${IP}'
      - 'influxdb influxdb.${DOMAIN}:${IP}'
      - 'z z.${DOMAIN}:${IP}'
      - 'portainer portainer.${DOMAIN}:${IP}'
      - 'pihole pihole.${DOMAIN}:${IP}'
      - 'smokeping smokeping.${DOMAIN}:${IP}'
      - 'tautulli tautulli.${DOMAIN}:${IP}'
      - 'hass hass.${DOMAIN}:${IP}'
      - 'obama obama.${DOMAIN}:${obama}'
    volumes:
      - /var/log/pihole.log:/var/log/pihole.log
      - /opt/appdata/pihole:/etc/pihole
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
    restart: always
    networks:
      proxy-tier:
      default:
        ipv4_address: ${DNS}

###Nextcloud###
  db:
    image: mariadb
    container_name: mariadb
    hostname: mariadb
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - /opt/appdata/db:/var/lib/mysql
      # - /root/nextcloud.db:/docker-entrypoint-initdb.d/nextcloud.sql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    dns: ${DNS}
    ports:
     - "3306:3306/tcp"

  redis:
    image: redis
    container_name: redis
    hostname: redis
    dns: ${DNS}
    restart: always
# && php /var/www/html/occ preview:pre-generate

  cron:
    image: nextcloud:fpm
    container_name: cron
    hostname: cron
    restart: always
    volumes_from:
      - nextcloud
    user: www-data
    entrypoint: |
      bash -c 'bash -s <<EOF
        trap "break;exit" SIGHUP SIGINT SIGTERM
        while [ ! -f /var/www/html/config/config.php ]; do
          sleep 1
        done
        while true; do
          php -f /var/www/html/cron.php && php /var/www/html/occ preview:pre-generate
          sleep 15m
        done
      EOF'
    dns: ${DNS}
    depends_on:
      - db
      - redis

  nextcloud:  
    image: nextcloud:fpm
    container_name: nextcloud
    hostname: nextcloud
    restart: always
    volumes:
      - nextcloud:/var/www/html
#      - /opt/appdata/nextcloud/.user.ini:/var/www/html/.user.ini
      - /opt/appdata/nextcloud/config:/var/www/html/config/
      - /opt/appdata/nextcloud/custom_apps:/var/www/html/custom_apps
      - /opt/appdata/nextcloud/data:/var/www/html/data
    environment:
      - MYSQL_HOST=db
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - NEXTCLOUD_TABLE_PREFIX=oc_
    dns: ${DNS}
    depends_on:
      - db
      - redis

  nginx:
    image: nginx
    container_name: nginx
    hostname: nginx
    restart: always
    volumes:
      - /opt/appdata/nginx/nextcloud.conf:/etc/nginx/nginx.conf
      - /opt/appdata/nextcloud/custom_apps:/var/www/html/custom_apps
      - nextcloud:/var/www/html:ro
    environment:
      - VIRTUAL_HOST=z.${DOMAIN}
      - LETSENCRYPT_HOST=z.${DOMAIN}
#      - LETSENCRYPT_EMAIL=${EMAIL}
    depends_on:
      - nextcloud
    dns: ${DNS}
    networks:
      - proxy-tier
      - default

  letsencrypt-companion:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: letsencrypt
    hostname: letsencrypt
    restart: always
    volumes:
      - /opt/appdata/proxy/certs:/etc/nginx/certs
      - /opt/appdata/proxy/conf.d:/etc/nginx/conf.d
      - /opt/appdata/proxy/vhost.d:/etc/nginx/vhost.d
      - /opt/appdata/proxy/html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    dns: ${DNS}
    networks:
      - proxy-tier
    depends_on:
      - proxy
      
#Home assistant
  mqtt:
    image: eclipse-mosquitto
    container_name: mqtt
    hostname: mqtt
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
      - /opt/appdata/mqtt/:/mosquitto/config/
    ports:
      - 1883:1883
      - 9001:9001
    dns: ${DNS}
    restart: always

  hass:
    image: homeassistant/home-assistant
    container_name: hass
    hostname: hass
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /dev/rtc:/dev/rtc:ro
      - /opt/appdata/hass:/config
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8123:8123/tcp
    restart: always
    network_mode: host
    depends_on:
      - mqtt
      - db
    environment:
      - PATH=$PATH:/config

# ###Pi Hole###
  # pihole:
    # image: diginc/pi-hole
    # container_name: pihole
    # hostname: pihole
    # ports:
     # - "${IP}:53:53/tcp"
     # - "${IP}:53:53/udp"
    # # - '53:53/tcp'
    # # - '53:53/udp'
     # - '8053:80/tcp'
    # volumes:
      # - /var/log/pihole.log:/var/log/pihole.log
      # - /opt/appdata/pihole:/etc/pihole
      # # - /opt/appdata/pihole/hosts:/etc/hosts
      # - /etc/localtime:/etc/localtime:ro
      # - /dev/rtc:/dev/rtc:ro
  # #net: host
    # cap_add:
     # - NET_ADMIN
    # environment:
      # - ServerIP=${IP}
      # - PROXY_LOCATION=pihole
      # - VIRTUAL_HOST=pihole.${DOMAIN}
      # - VIRTUAL_PORT=80
      # - WEBPASSWORD=${WEBPASSWORD}
    # extra_hosts:
    # # Resolve to nothing domains (terminate connection)
      # - 'nw2master.bioware.com nwn2.master.gamespy.com:0.0.0.0'
    # # LAN hostnames for other docker containers using jwilder
      # - 'sickrage sickrage.${DOMAIN}:${IP}'
      # - 'couchpotato couchpotato.${DOMAIN}:${IP}'
      # - 'transmission transmission.${DOMAIN}:${IP}'
      # - 'plex plex.${DOMAIN}:${IP}'
      # - 'grafana grafana.${DOMAIN}:${IP}'
      # - 'influxdb influxdb.${DOMAIN}:${IP}'
      # - 'z z.${DOMAIN}:${IP}'
      # - 'portainer portainer.${DOMAIN}:${IP}'
      # - "pihole pihole.${DOMAIN}:${IP}"
      # - 'smokeping smokeping.${DOMAIN}:${IP}'
      # - 'tautulli tautulli.${DOMAIN}:${IP}'
      # - 'hass hass.${DOMAIN}:${IP}'
    # restart: always
    # networks:
      # - proxy-tier
      # - default
  # collectd:
    # image: fr3nd/collectd
    # container_name: collectd
    # hostname: collectd
    # privileged: true
    # network_mode: host
    # volumes:
      # - /proc:/mnt/proc:ro
      # - /opt/appdata/collectd:/etc/collectd:ro

  # duplicati:
    # image: linuxserver/duplicati
    # container_name: duplicati
    # hostname: duplicati
    # ports:
     # - 8200:8200
    # environment:
      # - VIRTUAL_HOST=duplicati.${DOMAIN}
      # - VIRTUAL_PORT=8200
      # - PUID=33
      # - PGID=33
    # volumes:
      # - /opt:/opt
      # - /mnt/storj/backups:/backups
      # - /opt/appdata/duplicati:/config
      # - /etc/localtime:/etc/localtime:ro
      # - /dev/rtc:/dev/rtc:ro
    # networks:
      # - proxy-tier
      # - default


  # chronograf:
    # image: chronograf
    # container_name: chronograf
    # hostname: chronograf
    # volumes:
      # - /opt/appdata/chronograf:/var/lib/chronograf
    # environment:
      # - VIRTUAL_HOST=chronograf.${DOMAIN}
      # - VIRTUAL_PORT=8888
    # ports:
      # - "8888:8888"
    # links:
      # - influxdb
    # networks:
      # - proxy-tier
      # - default

#  organizr:
#    image: lsiocommunity/organizr
#    container_name: organizr
#    ports:
#      - 8080:80
#    environment:
#      - PUID=${PUID}
#      - PGID=${PGID}
#      - VIRTUAL_HOST=meh.${DOMAIN}
#      - VIRTUAL_PORT=80
#    volumes:
#      - /etc/localtime:/etc/localtime:ro
#      - /dev/rtc:/dev/rtc:ro
#      - /opt/appdata/organizr:/config
#    restart:
#      always
#    networks:
#      - proxy-tier
#      - default

#
#  watchtower:
#    image: centurylink/watchtower
#v2tec/watchtower
#    container_name: watchtower
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - /etc/localtime:/etc/localtime:ro
#      - /dev/rtc:/dev/rtc:ro
#      - /opt/appdata/watchtower/config.json:/config.json
#    command: --debug --interval 3600
